#!/bin/bash

all() {  # doesn't include repos
    cli
    desktop
    tools
    apps
}

repos() {  # idempotently clones personal / work  repos
   obsidian_vault
}

apps() {
    sudo apt-get update
    sudo apt-get install -y \
      baobab \
      blueman \
      gnome-shell-extensions-gpaste \
      gparted \
      pulseaudio-module-bluetooth \
      zathura
    toolbox
}

tools() {
  docker
  miniconda
  mamba
  tinygrad
  act
  get_restic
}

cli() {
    # idempotently installs cli utils
    sudo apt-get update
    sudo apt-get install -y \
      curl \
      git \
      jq
      libfuse2 \
      make \
      neofetch \
      nvtop \
      python3 \
      python3-pip \
      ripgrep \
      ssh \
      tree \
      zsh

    zsh zsh/plugin-files/zap_zsh_install # minimal zsh plugin manager
    sudo chsh -s "$(which zsh)" "$USER" # set zsh as default shell

    # vim 9
    sudo add-apt-repository ppa:jonathonf/vim -y
    sudo apt install --reinstall vim -y

    # fuzzy finder
    if [ ! -d "$HOME/.fzf" ]; then git clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf; fi;
    cd ~/.fzf && git pull && ~/.fzf/install

    # terminal theme
    curl -sSL "https://github.com/zthxxx/jovial/raw/master/jovial.zsh-theme" -o ~/.dotfiles/zsh/plugin-files/mytheme.zsh-theme
    pip3 install --usesr pywal

    # htop but based (install from source for gpu support)
    cd "$HOME/repos/tools" && { if [ -d "btop" ]; then cd btop && git pull; else git clone https://github.com/aristocratos/btop.git && cd btop; fi; sudo make && sudo make install; }

    sudo mkdir -p /usr/local/bin
    sudo ln -s ~/bin/* /usr/local/bin/

    ### remove bloat
    # screen reader
    sudo apt-get remove -y orca
    # braille display driver
    sudo apt-get remove -y brltty
}

desktop() {
    ./bin/keybindings.pl -i

    # disable screenshot sound
    if [ -f "/usr/share/sounds/freedesktop/stereo/camera-shutter.oga" ]; then
        sudo mv /usr/share/sounds/freedesktop/stereo/camera-shutter.oga /usr/share/sounds/freedesktop/stereo/camera-shutter-disabled.oga
    fi
}

docker() {
    curl -fsSL https://get.docker.com -o get-docker.sh
    sudo sh ./get-docker.sh
    sudo usermod -a -G docker $USER
    rm get-docker.sh
    echo "Reboot to apply changes"
}

miniconda() {
    mkdir -p ~/miniconda
    wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh
    bash Miniconda3-latest-Linux-x86_64.sh -b -u -p ~/miniconda # batch (no questions) mode, update, path
    ~/miniconda/bin/conda init zsh
    rm Miniconda3-latest-Linux-x86_64.sh
    echo "To use miniconda, add the following to your .zshrc and start a new shell: PATH=~/miniconda/bin:$PATH"
}

mamba() {
    curl -L -O "https://github.com/conda-forge/miniforge/releases/latest/download/Miniforge3-Linux-x86_64.sh"
    bash Miniforge3-Linux-x86_64.sh -b
    rm Miniforge3-Linux-x86_64.sh
    conda config --append envs_dirs ~/miniconda3/envs/
}

tinygrad() {
    mamba env list | grep 'tinygrad' >/dev/null 2>&1 || mamba create -n tinygrad
    source "$HOME/miniforge3/bin/activate" tinygrad # https://askubuntu.com/a/1464306
    cd "$HOME/repos/tools"
    if [ -d "tinygrad" ]; then cd tinygrad && git pull; else git clone https://github.com/tinygrad/tinygrad.git &&  cd tinygrad ; fi;
    python -m pip install -e .
    python -m pip install -e '.[testing]'
    # for visualizing the computation graph
    sudo apt install -y graphviz
    pip install pydot
}

toolbox() {
    curl -fsSL https://raw.githubusercontent.com/nagygergo/jetbrains-toolbox-install/master/jetbrains-toolbox.sh | bash
    cd ~/.local/bin/ && ./jetbrains-toolbox
}

act() {
    # local github actions runner
    curl -s https://raw.githubusercontent.com/nektos/act/master/install.sh | sudo zsh
}

get_restic() {
    # backup tool
    sudo apt-get install -y restic
    sudo restic self-update
}

### functions below this line are not included in `all` and should be run manually / if needed

secrets() {
  if [ ! -f ~/.dotfiles/secrets/.encryption_key ]; then
    if ! [ -d "secrets" ]; then
      git clone git@github.com:MaxWolf-01/secrets.git
    fi
    echo "Please provide the encryption key in ~/.dotfiles/secrets/.encryption_key then run the script again."
    return
  fi
  cd ~/.dotfiles/secrets && git pull
  ln -sf ~/.dotfiles/git/hooks/pre_commit_encrypt ~/.dotfiles/secrets/.git/hooks/pre-commit
  ln -sf ~/.dotfiles/git/hooks/post_commit_decrypt ~/.dotfiles/secrets/.git/hooks/post-commit
  bash ~/.dotfiles/bin/decrypt_enc_files  # on first run, decrypt all files (non-encrypted are .gitignored)

  ln -sf ~/.dotfiles/secrets/ssh/config ~/.ssh/config
#  find ~/.dotfiles/secrets/bin -type f -exec ln -sf {} ~/bin/ \;
}

vim_copilot() {
    git clone https://github.com/github/copilot.vim.git ~/.vim/pack/github/start/copilot.vim
}

rm_conda() {
    rm -rf ~/miniconda
    rm -rf ~/.condarc ~/.conda ~/.continuum
    rm -rf ~/miniforge3
}

syncthing () {
    sudo mkdir -p /etc/apt/keyrings
    sudo curl -L -o /etc/apt/keyrings/syncthing-archive-keyring.gpg https://syncthing.net/release-key.gpg
    echo "deb [signed-by=/etc/apt/keyrings/syncthing-archive-keyring.gpg] https://apt.syncthing.net/ syncthing stable" | sudo tee /etc/apt/sources.list.d/syncthing.list
    sudo apt-get update
    sudo apt-get install syncthing
}

install_nodejs() {
    sudo apt-get update && sudo apt-get install -y ca-certificates curl gnupg
    sudo mkdir -p /etc/apt/keyrings
    curl -fsSL https://deb.nodesource.com/gpgkey/nodesource-repo.gpg.key | sudo gpg --dearmor -o /etc/apt/keyrings/nodesource.gpg
    NODE_MAJOR=21
    echo "deb [signed-by=/etc/apt/keyrings/nodesource.gpg] https://deb.nodesource.com/node_$NODE_MAJOR.x nodistro main" | sudo tee /etc/apt/sources.list.d/nodesource.list
    sudo apt-get update && sudo apt-get install nodejs -y
    sudo npm install -g pnpm
}

obsidian_vault() {
    mkdir -pv ~/repos/obsidian && cd ~/repos/obsidian
    if [ -d "knowledge-base" ]; then
        echo "knowledge-base already exists"
        return
    fi
    git clone git@github.com:MaxWolf-01/knowledge-base.git
    cd knowledge-base && git clone git@github.com:MaxWolf-01/.obsidian-pc.git && mv .obsidian-pc .obsidian
}

obsidian() {
    appimage="$(find ~/Downloads -name 'Obsidian*.AppImage')"
    if [ -z "$appimage" ]; then
        echo "Error: No Obsidian AppImage found in Downloads."
        exit 1
    fi
    COUNT=$(echo "$appimage" | wc -l)
    if [ $COUNT -gt 1 ]; then
        echo "Warning: Multiple Obsidian AppImages found. Using the first one."
    fi
    appimage=$(echo "$appimage" | head -n 1)
    echo "Using Obsidian AppImage: $appimage"
    mv "$appimage" ~/applications/
    chmod +x ~/applications/"$(basename "$appimage")"
    sed "s|\$HOME|$HOME|g" "$HOME"/.dotfiles/desktop/obsidian.desktop > "$HOME"/.local/share/applications/obsidian.desktop
    update-desktop-database "$HOME"/.local/share/applications/
    echo "Obsidian app set up."
}

discord() {
  # check if npm and pnpm are installed
  if ! command -v npm &> /dev/null || ! command -v pnpm &> /dev/null; then
    echo "npm or pnpm not found. Run './setup install_nodejs'"
    return
  fi
  cd ~/repos/tools && git clone https://github.com/BetterDiscord/BetterDiscord.git
  cd BetterDiscord
  pnpm install
  pnpm build
  pnpm inject
  find ~/.dotfiles/desktop/discord/themes -type f -exec ln -sf {} ~/.config/BetterDiscord/themes/ \;
  wget https://discordstyles.github.io/DarkMatter/DarkMatter.theme.css -O ~/.config/BetterDiscord/themes/DarkMatter.theme.css
}

### Networking etc

wireguard_client() {
  sudo apt update && sudo apt install -y wireguard resolveconf
  mkdir -p ~/wireguard && chmod 700 ~/wireguard
  wg genkey | tee ~/wireguard/private.key
  cat ~/wireguard/private.key | wg pubkey | tee ~/wireguard/public.key
  echo "EXECUTE THE FOLLOWING ON THE VPS SERVER, then create a new client and copy the client config to ~/wireguard/wg0.conf\n--------------"
  echo "curl -O https://raw.githubusercontent.com/angristan/wireguard-install/master/wireguard-install.sh
  chmod +x wireguard-install.sh
  ./wireguard-install.sh"
  echo "When done, execute (on the CLIENT):\nsudo wg-quick up ~/wireguard/wg0.conf"
}

sshkeys() {
    ssh-keygen -t rsa -b 4096
    echo "Use 'ssh-copy-id <user>@<host>' or '<host>' to add keys to hosts"
}

spg_vpn() {
    sudo apt-get update && sudo apt-get install network-manager-openconnect network-manager-openconnect-gnome
    sudo systemctl restart NetworkManager
    sudo apt-get install virt-viewer
}

# Check if the first argument is the name of a function
if declare -f "$1" > /dev/null; then
  # Call the function with the rest of the arguments
  "$@"
else
  echo "$1 is not a function"
fi
